class Solution {
public:
    string reorganizeString(string s) {

        unordered_map<char,int> mpp;
        for(auto ch:s){
            mpp[ch]++;
        }

        priority_queue<pair<int,char>> maxheap;
        for(auto &[key,value]:mpp){
            maxheap.push({value,key});
        }

        string ans="";
        while(!maxheap.empty()){

            int firstvalue=maxheap.top().first;
            char firstchar=maxheap.top().second;
            maxheap.pop();
            int n=ans.size();
            if(n>=1 && ans[n-1]==firstchar){
                if(maxheap.empty()){
                    break;
                }

                int secondvalue=maxheap.top().first;
                char secondchar=maxheap.top().second;
                maxheap.pop();
                ans.push_back(secondchar);
                secondvalue--;
                if(secondvalue>0){
                maxheap.push({secondvalue,secondchar});
                }
            }
            else{
                ans.push_back(firstchar);
                firstvalue--;
            }
            if(firstvalue>0){
                maxheap.push({firstvalue,firstchar});
            }
        }
        return s.length()==ans.length()?ans:"";  
        
    }
};
