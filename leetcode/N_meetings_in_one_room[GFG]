class Solution {
  public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    struct Meeting {
        int start, end;
    };

    // Comparator function to sort meetings by end time.
    static bool comp(Meeting a, Meeting b) {
        return a.end < b.end;
    }

    int maxMeetings(vector<int>& start, vector<int>& end) {
        int n = start.size();
        vector<Meeting> meetings(n);

        // Populate the meetings vector
        for (int i = 0; i < n; i++) {
            meetings[i] = {start[i], end[i]};
        }

        // Sort meetings based on end time
        sort(meetings.begin(), meetings.end(), comp);

        int count = 1; // At least one meeting can be conducted
        int lastEndTime = meetings[0].end;

        // Iterate through sorted meetings
        for (int i = 1; i < n; i++) {
            if (meetings[i].start > lastEndTime) {
                count++;
                lastEndTime = meetings[i].end;
            }
        }
        return count;
    }
};
