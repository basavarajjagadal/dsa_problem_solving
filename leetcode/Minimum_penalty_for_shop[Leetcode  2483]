class Solution {
public:
    int bestClosingTime(string customers) {
       int n = customers.size();
        vector<int> prefixN(n + 1, 0), prefixY(n + 1, 0);

        // Compute prefix sum for 'N' occurrences
        for (int i = 0; i < n; i++) {
            prefixN[i + 1] = prefixN[i] + (customers[i] == 'N');  //penalty before closing
        }

        // Compute suffix sum for 'Y' occurrences
        for (int i = n - 1; i >= 0; i--) {
            prefixY[i] = prefixY[i + 1] + (customers[i] == 'Y');  //penalty after closing
        }

        int minpenalty = INT_MAX, besttime = 0;
        for (int i = 0; i <= n; i++) {
            int penalty = prefixN[i] + prefixY[i];
            if (penalty < minpenalty) {
                minpenalty = penalty;
                besttime = i;
            }
        }
        return besttime;
        
    }
};
