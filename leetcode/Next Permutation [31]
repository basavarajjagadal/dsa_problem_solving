class Solution {
public:
    void nextPermutation(vector<int>& nums) {
    int n=nums.size();int pivot=-1;
    // step 1:to find pivot
        for(int i=n-2;i>=0;i--){
            if(nums[i] < nums[i+1]){
                pivot=i;
                break;
            }
        }
        // return if pivot is not found
        if(pivot==-1){
            reverse(nums.begin(),nums.end());
            return;
        }
        // swap with pivot with last element
        for(int i=n-1;i>pivot;i--){
            if(nums[i]>nums[pivot]){
                swap(nums[i],nums[pivot]);
                break;
            }
        }
        // step 3:arrange decerasing order to order
        // reverse(nums.begin()+pivot+1,nums.end());
        // using two pointer approach
        int i=pivot+1;
        int j=n-1;
        while(i<=j){
            swap(nums[i],nums[j]);
            i++;j--;
        }
    }
};
