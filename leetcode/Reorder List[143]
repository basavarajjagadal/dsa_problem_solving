/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode middleNode(ListNode head) {

        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){

            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
     public ListNode reverseList(ListNode head) {

        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;

    }
    public void reorderList(ListNode head) {
        if (head==null || head.next==null) {
            return;
        }
        ListNode mid=middleNode(head);
        ListNode headsecond=reverseList(mid);
        ListNode headfirst=head;
        while(headsecond!=null && headfirst!=null){
            ListNode temp1=headfirst.next;
            headfirst.next=headsecond;
            headfirst=temp1;

            ListNode temp2=headsecond.next;
            headsecond.next=headfirst;
            headsecond=temp2;
        }
        if(headfirst!=null){
            headfirst.next=null;
        }
        


    }
}
